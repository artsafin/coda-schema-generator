

//region Document

var tokenMiddleware = func(token string) {{ $.APIPackageName }}.RequestEditorFn {
    return func(ctx context.Context, req *http.Request) error {
        req.Header.Set("Authorization", fmt.Sprintf("Bearer %s", token))
        return nil
    }
}

func NewDefaultClient(server, token string, clientOpts ...{{ $.APIPackageName }}.ClientOption) ({{ $.APIPackageName }}.ClientWithResponsesInterface, error) {
	clientOpts = append(clientOpts, {{ $.APIPackageName }}.WithRequestEditorFn(tokenMiddleware(token)))

	return {{ $.APIPackageName }}.NewClientWithResponses(server, clientOpts...)
}

func NewCodaDocument(server, token, docID string, clientOpts ...{{ $.APIPackageName }}.ClientOption) (*CodaDocument, error) {
	client, err := NewDefaultClient(server, token, clientOpts...)
	if err != nil {
		return nil, err
	}

	return &CodaDocument{
		docID:          docID,
		client:         client,
		relationsCache: &sync.Map{},
	}, nil
}

type CodaDocument struct {
	docID          string
	client         {{ $.APIPackageName }}.ClientWithResponsesInterface
	relationsCache *sync.Map // Used for deep loading to share loaded sub-entities
}

func (d *CodaDocument) ListAllRows(ctx context.Context, tableID string, extraParams ...{{ $.APIPackageName }}.ListRowsParam) (list []{{ $.APIPackageName }}.Row, err error) {
    valueFormat := {{ $.APIPackageName }}.ValueFormatRich
    var pageToken {{ $.APIPackageName }}.PageToken

    params := {{ $.APIPackageName }}.ListRowsParams{}
	for _, p := range extraParams {
		p(&params)
	}
    params.ValueFormat = &valueFormat
    params.PageToken = &pageToken

    for {
        resp, err := d.client.ListRowsWithResponse(
            ctx,
            {{ $.APIPackageName }}.DocId(d.docID),
            {{ $.APIPackageName }}.TableIdOrName(tableID),
            &params,
        )
        if err != nil {
            return nil, err
        }

        if resp.StatusCode() != 200 || resp.JSON200 == nil {
            return nil, fmt.Errorf("response status %v, body: %s", resp.StatusCode(), resp.Body)
        }

        for _, row := range resp.JSON200.Items {
            list = append(list, row)
        }

        if resp.JSON200.NextPageToken == nil {
            return list, nil
        }

        pageToken = {{ $.APIPackageName }}.PageToken(*resp.JSON200.NextPageToken)
    }
}

//endregion
