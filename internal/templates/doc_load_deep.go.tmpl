

//region Methods for deep data fetching (with loading relations)

// Tables enumeration is used for specification of the tables to deep load
type Tables struct {
{{- range .Tables.Items }}
{{- if eq .TableType "table" }}
    {{ fieldName .Name }} bool // {{ .Name }}
{{- end }}
{{- end }}
}

{{- range .Tables.Items }}
{{- $table := . }}
{{- $columns := index $.Columns .ID }}
{{- if $columns.HasReferencedTables }}

// LoadRelations{{ fieldName $table.Name }} loads data into lookup fields of the {{ fieldName $table.Name }} struct
func (doc *CodaDocument) LoadRelations{{ fieldName $table.Name }}(ctx context.Context, shallow map[RowID]{{ fieldName $table.Name }}, rels Tables) (err error) {
	var ok bool

	{{- range $columns.GetReferencedTables }}
	{{- $colTypeName := typeName .Name "Map" }}
	{{- $colFieldName := fieldName .Name }}
	var {{ $colTypeName }} map[RowID]{{ $colFieldName }}
	if {{ $colTypeName }}, ok = doc.relationsCache["{{ $colFieldName }}"].(map[RowID]{{ $colFieldName }}); rels.{{ $colFieldName }} && !ok {
		{{ $colTypeName }}, _, err = doc.MapOf{{ $colFieldName }}(ctx)
		if err != nil {
			return err
		}
		doc.relationsCache["{{ $colFieldName }}"] = {{ $colTypeName }}
	}

	{{- end }}

	for ii, item := range shallow {
		{{- range $columns.GetReferencedTables }}
		{{- $colTypeName := typeName .Name "Map" }}
		{{- $colFieldName := fieldName .Name }}
		if rels.{{ $colFieldName }} {
			{{- range $columns.GetColumnsReferencedTo .Name }}
			for vi, v := range item.{{ fieldName .Name }}.Values {
				if v.Data != nil {
					continue
				}

				data, ok := {{ $colTypeName }}[RowID(v.RowID)]

				if ok {
					shallow[ii].{{ fieldName .Name }}.Values[vi].Data = &data
				}
			}
			{{- end }}
		}

		{{- end }}
	}

	return nil
}

{{- end }}
{{- end }}

//endregion
