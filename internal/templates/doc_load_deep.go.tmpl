

//region Methods for deep data fetching (with loading relations)

// Tables enumeration is used for specification of the tables to deep load
type Tables struct {
{{- range .Tables.Items }}
{{- if eq .TableType "table" }}
    {{ fieldName .Name }} bool // {{ .Name }}
{{- end }}
{{- end }}
}

{{- range .Tables.Items }}
{{- $table := . }}
{{- $columns := index $.Columns .ID }}
{{- if $columns.HasReferencedTables }}

// LoadRelations{{ fieldName $table.Name }} loads data into lookup fields of the {{ fieldName $table.Name }} struct
func (doc *CodaDocument) LoadRelations{{ fieldName $table.Name }}(ctx context.Context, shallow map[RowID]*{{ fieldName $table.Name }}, rels Tables) (err error) {
	var wg sync.WaitGroup

	{{- range $columns.GetReferencedTables }}
	{{- $colTypeName := typeName .Name "Map" }}
	{{- $colFieldName := fieldName .Name }}
	var {{ $colTypeName }} map[RowID]*{{ $colFieldName }}
	{{- end }}

	{{- range $columns.GetReferencedTables }}
	{{- $colMapType := typeName .Name "Map" }}
	{{- $colInterType := typeName .Name "Inter" }}
	{{- $colFieldName := fieldName .Name }}
	func(){
		if !rels.{{ $colFieldName }} {
			return
		}

		if {{ $colInterType }}, ok := doc.relationsCache.Load("{{ $colFieldName }}"); ok {
			if {{ $colMapType }}, ok = {{ $colInterType }}.(map[RowID]*{{ $colFieldName }}); ok {
				return
			}
		}

		wg.Add(1)
		go func(){
			defer wg.Done()

			{{ $colMapType }}, _, err = doc.MapOf{{ $colFieldName }}(ctx)
			doc.relationsCache.Store("{{ $colFieldName }}", {{ $colMapType }})
		}()
	}()

	{{- end }}

	wg.Wait()

	if err != nil {
		return err
	}

	for ii, _ := range shallow {
		{{- range $columns.GetReferencedTables }}
		{{- $colTypeName := typeName .Name "Map" }}
		{{- $colFieldName := fieldName .Name }}
		if rels.{{ $colFieldName }} {
			{{- range $columns.GetColumnsReferencedTo .Name }}
			shallow[ii].{{ fieldName .Name }}.Hydrate({{ $colTypeName }})
			{{- end }}
		}

		{{- end }}
	}

	return nil
}

{{- end }}
{{- end }}

//endregion
